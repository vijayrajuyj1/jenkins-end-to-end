pipeline {
  agent {
    docker {
      image 'vijayarajult2/ultimate:v2'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }

  environment {
    DOCKER_IMAGE = "vijayarajult2/ultimate:${BUILD_NUMBER}"
    SONAR_URL = "http://52.90.249.232:9000"
    GIT_REPO_NAME = "Jenkins-demos"
    GIT_USER_NAME = "vijayrajuyj1"
    REGISTRY_CREDENTIALS = credentials('docker-cred')
  }

  stages {
    stage('Checkout') {
      steps {
        echo 'Checking out the code...'
        // Uncomment the line below to checkout your repository
        // git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
        sh 'echo passed'
      }
    }

    stage('Build and Test') {
      steps {
        echo 'Building and testing the project...'
        sh 'ls -ltr'
        // Build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }

    stage('Static Code Analysis') {
      steps {
        echo 'Performing static code analysis with SonarQube...'
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        script {
          echo "Building Docker image ${DOCKER_IMAGE}..."
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'

          def dockerImage = docker.image("${DOCKER_IMAGE}")

          echo "Pushing Docker image ${DOCKER_IMAGE} to Docker Hub..."
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }

    stage('Run Docker Container') {
      steps {
        script {
          try {
            echo "Running Docker container from image ${DOCKER_IMAGE}..."
            def container = docker.image("${DOCKER_IMAGE}").run("-d -p 8080:8080")
            echo "Running container ${container.id}"
          } catch (Exception e) {
            echo "Failed to run Docker container: ${e.message}"
            throw e
          }
        }
      }
    }

    stage('Update Deployment File') {
      steps {
        echo 'Updating the Kubernetes deployment file with the new image tag...'
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config user.email "vijayarajuyj1@gmail.com"
            git config user.name "vijayrajuyj1"
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }
  }
}
